# 생산혁신기술 {#sec-production-innovation}

## 칸판 생산방식

:::{.callout-tip icon=false title="기출"}
97-1-5
:::

![https://en.wikipedia.org/wiki/Kanban](https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Kanban_principles.svg/1920px-Kanban_principles.svg.png)

칸판(Kanban, 또는 간판으로 읽음)생산 방식은 "필요한 것은 필요한 때에 필요한 만큼만"이라는 JIT(Just In Time) 사상을 실현하기 위해 도요타에서 창안 되었다. JIT 생산에 있어 정보 시스템 역할을 한다. 즉 어떤 제품이나 부품이 언제 얼마나 필요한가를 알려주는 기능이다.

### 칸판 역할

칸판은 엽서 크기의 카드나 전표로 작업 지시표 내지 이동표 역할을 한다.

1. 생산, 운방 지시 정보
    - 무엇을 얼마 만큼 생산해서어디로 운반하는가?
    - 어떤 자재를 어디로부터 얼마 만큼 조달하도록 하는가?
2. 눈으로 보는 관리 도구
    - 과인생산 제어, 최소 자재량에 대한 통제, 진척 상황 판단
3. 개선 도구
    - 과잉 공급된 자재나 평준화 생산 흐름 상황을 파악

### 칸판 종류

칸판 종류는 다음과 같다.

생산지시 칸판
: - 작업지시표 역할, 생산부문에 대한 생산지시용

인수(이동) 칸판
: - 현품표와 이동표 기능으로 뒷 공정이 앞공정으로부터 물품을 인수할 때 사용

임시 칸판
: - 임시 생산 경우에 사용

전자 칸판
: - 운반 기간이 3~4일 이상 걸리는 경우

기타
: - 칸판 역할을 수향할 수 있는 신호
    - 용기 시스템: 전용 용기를 칸판으로 사용
    - 무용기 시스템: 맥도널드 주문 접수원 금전 등록기에 입력한 정보가 주방으로 전달(칸판 역할)

### 칸판 용기 수 산정

<font color="orange">업데이트 예정</font>

### 칸판 운영 규칙

칸판 운영 규칙은 다음과 같다.

- 모든 컨테이너 부품에 칸판을 부착한다.
- 뒷 공정에서 앞공정으로 가지러 간다(필요 시 필요한 양만 생산하고 인수해 가도록 함).
- 앞 공정은 뒷 공정에서 가져간 만큼만 생산한다(공정품 재고를 최소로 하기 위함).
- 불량품을 뒷 공정에 보내지 않는다(불량으로 인한 솔실을 막고 칸판 흐름 보증).
- 생산을 평준화 한다.
- 칸판은 세부적인 조정이 가능하다(수요 변화 내지 생산현장 사정에 적응하는 능력 갖춤).
- 공정을 안정화하고 합리화 한다(생산 안정성 유지와 낭비 제거).

### 칸반 운영 조건
칸반방식을 운영하기 위한 조건은 다음과 같다.

- 자동화와 생산평준화
- 소로트화
- U자형 설비배치와 다기능공 육성
- 작업 표준화

::: {.callout-warning icon="false" title="칸판 방식 적용이 어려운 이융"}
1. 원칙을 준수하며 속도 있게 진행하기 어려움
2. 거듭되는 시행착오에 의한 좌절, 피로감
3. 당장 혼란과 손해를 두려워함
4. 칸판 방식 적용을 기법적인 측면에서만 접근 (종업원 인식 부족)
5. 기법 적용과 접근 방법 오류
6. 지속적인 관리 부재
:::

## TOC {#sec-toc}

:::{.callout-tip icon=false title="기출"}
100-3-6
:::

TOC는 Theory of Constraints 약자로 시스템이 목표를 달성하는데 가장 방해가 되는 요소인 **제약**(constraint)을 효율적으로 관리하는 방법이다[^toc].

[^toc]: [https://www.tockorea.org/what-is-toc](https://www.tockorea.org/what-is-toc)

능력제약(capacity constraint)
: - 시스템이 요구하는 적시에 능력을 제공할 수 없는 자원

시장제약(market constraint)
: - 고객 주문량이 시스템 성장에 필요할 정도로 충분하지 않은 상태

시간제약(time constraint)
: - 시장 요구에시스템 대응 시간이 너무 길어서 고객과 현재 약속을 충족하는 시스템 능려과 새로운 비지니스 성공 능력이 위태로워지는 상태

### TOC 개념

TOC는 한 단어로압축하면 초점(focus)이다. 초점이란 "해야 할 것을 하는 것"이라고 단순하게 정의할 수 있다. 파레토는 20% 요소가 결과의 80%에 기여한다는 것을 증명했다. 모든 것을 할 수 없을 때 할 것을 적절하게 선택하는 것이 중요하다. 즉 무엇을 선택해 초점을 맞추느냐가 극히 중요하다.

파레토 20-80법칙은 시스템 간 요소 상호의존성(independency)이 없을 때 적용된다. 상호의존성이 많을수록 그리고 변동성(variablity)이 클 수록 상황은 더 극단적이 된다. 조직에서는 수많은 상호의존성과 비교적 큰 변동성이 있어 시스템 성과를 결정하는 요수 수, 즉 제약 수는 극히 적다. TOC에서는 0.1% 요소가 결과의 99.9%를 결정한다고 할 수 있다.

0.1% 제약을 선택해서 초점을 맞추는 것이 TOC 개념이다. 초점이란 말을 좀 더 구체적으로 정의한다면 해야할 것을 하며 또한 하지 않아야 할 것을 하지 않는다는 것이다(Eliyahu M. Goldratt).

### TOC 문제해결 도구

흐름(Flow)
: - DBR(Drum-Buffer-Rope)
- CPM(Critical Cahin Project Management)
- MTA(Make-to-Availability)

변화(Change)
: - 집중개선 5단계
- 사고 프로세스(Thinking Process)
- TOC for Education
- Strategic & Tactic Tree

측정(Measure)
: - 스루풋 회계(Throughput accounting)

### 5 Focusing Step

먼저 목표를 설정하고 목표 달ㄷ성을 판단할 수 이는 적합한 성과평가방법을 결정한다.

1. 시스템 제악을 찾는다.
2. 투자없이 제약을 최대한 활용할 방법을 결정한다.
3. 제약을 활용할 방법에 따라 나머지 비제약을 모두 제약 속도에 맞춘다.
4. 제약 능력을 확장한다.
5. 타성에 젖지 말고 1단계로 돌아간다.

## DBR {#sec-dbr}

![https://de.m.wikipedia.org/wiki/Drum-Buffer-Rope](https://de.m.wikipedia.org/wiki/Datei:Herbie_in_a_queue.png)

**DBR**(Drum-Buffer-Rope)은 내부 물리적인 제약일 때, 제약 자원을 최대한 활용하기 위한 생산일정 수립 방법이다.

드럼(Drum)
: - 제약자원 상세 일정

버퍼(Buffer)
: - 혼란발생에 대응하기 위해세업시간과 가공시간 외에 여유시간을 추가함(제약버퍼, 조립버퍼, 출하버퍼)

로프(Rope)
: - 제약자원 상세일정에 근거한 첫공정 자재투입 일정

외부 시장제약일 때, 적용하는 단순화된 DBR도 있으며, 이것은 제약자원 상세일정을 수립하지 않는 방법으로써 아주 단순하며 실제 수요에 따라 우선순위가 변동된다.

병목을 잘 활용하여 공장을 운영하면 생산능력 낭비를 줄일 수 있다. 병목공정 생산량이 공장 전체 생산량을 결정하기 때문이다. DBR을 '집중개선프로세스 5단계'를 따라 설명하면 다음과 같다.

1단계 - 병목공정을 찾는다.
: - 병목은 작업량을 생산능력과 비교하여 판단한다. 병목은 생산능력 대비 작업량 비율이 가장 큰 곳이다. 그리고 이곳은 재공재고가 가장 많이 쌓여 있고, 현장 관리자가 가장 많이 독촉받는 곳이기도 하다.

2단계 - 병록공정을 최대한 활용한다.
: - 많은 관리자들은 병목은 즉시 해소되어야 한다고 주장한다. 그렇지만 해소하기이전에 이를 적극적으로 활용하는 과정이 필요하다. 그 핵심은 병목공정 생산 스케쥴을 작성하는데 있다. 우리는 이 스케쥴을 **드럽**(drum)이라 부른다. 개선활동 초점을 이곳에 맞추어 병목공정 가동율(효율)을 최대한 높인다. 아무튼 병목 생산량이 공장 전체 공급능력을 결정한다는 사실을 잊지 말아야 한다.

3단계 - 비병목공정 활동을 병목공정 스케쥴에 맞춘다.
: - 첫 공정에서는 병목공정 스케쥴 수량과 시기에맞추어 자재를 투입한다. 우리는 이것을 '**로프**(rope)를 연결한다'라고 말한다. 비병목공정은 병록공정이 100% 효율로 가동될 수 있도록 가공품 공급에 차질이 없어야 한다.이를 위해서 가공품이 병목공정에 스케쥴보다 일찍 도착하도록 작업한다. 우리는 이 여ㅑ유시간을 **버퍼**(buffer)라 부른다. 또 불량 때문에 수장이 부족하지 않도록 주의한다.

4단계 - 병목공정 능력을 향상시킨다.
: - 시장 수요가증가하여 생산량을 늘려야 할 상황이라면, 병목공정 능력을 키우는 것으로 생산량이 늘어난다. 그렇지만 비병목공정 능력도 기울 필요가 생긴다. 이것은 병목공정을 보호하기 위해서 여유능력을 추가로 필요한 경우이다.

많은 공장에서는 3단계까지만 적용하더라도 생산량이 늘어난다. 대부분 공장은 생산능력이 실제 알고 있는 것보다 더 크며 단지 능력이 허비되는 것이 잘 드러나지 않아 모르고 있을 뿐이다. 이와같은 병목 활용법은 이런 사실을 알려 주고 설비투자를 감소시킬 수 있다.

DBR은 병목공정을 최대한 활용할 수 있는 스케줄링 방법과 버퍼관리 방법을 제공한다. DBR은 납기 단축과 재고감축을 동시에달성하려는 일에 획기적인 성과를 달성한다. 병목공정에 초점을 맞추므로 시간이 적게 걸리고 비용도 적게 된다.

## CCPM {#sec-ccpm}

![https://salesprocessengineering.net/spe/criticalchain/](https://salesprocessengineering.net/wp-content/clip_image012.gif)

**CPM** 또는 **CCPM**(critical chain project management)은 조직 전체 프로젝트에 대해 과업과 자원 종속성을 모두 고려하여 제약자원을 중심으로 스케줄을 수립하는 것으로써, 그 프로젝트 일정에서 가장 긴 경로를 크리티컬 체인(critical chain)이라 하며, 각 과업에 포함된 안전시간을 프로젝트 끝에 버퍼 하나로 모아일정을 계획하는 방법이다. 조직에서 수행하는 모든 프로젝트를 정시에 완료하는 것을 목적으로 관리한다.

CCPM 기본 아이디어는 다음과 같다.

- 각 단위작업 일정은 지정하지 않는다.
- 각 단위작업에 추가된 시간은 한데 모아 풀(pool)로 사용한다.
- 프로젝트 납기에 영향을 미치는 단위만 통제한다.
- 한정된 자원을 여러 프로젝트에효과적으로 사용하기 위해 자원 파이프라인을 사용한다.

이제 이러한 아이디어를 구현하는 방법은 마치 릴레이 달리기와 같다. 각 단위작업별 시작시점과 완료시점은 지정되지 않고 선행작업이 완료되면 바로시작한다. 작업이 일단 시작되면 전력을 다해 중단없이 빠르게 진행한다. 그리고 완료되면 즉시 보고한다.

이런 방식은 프로젝트 납기를 획기적으로 단축시킨다. 뒤에 있는 여유시간을 전부 사용하지 않아도 될 정도이다. CCPM이 적용된 사례를 보면 대부분 삽입된 여유시간을 다 사용하지 않고서도 프로젝트를 마칠 수 있었다.

CCPM 특징을 요약하면 다음과 같다.

- 단위작업 납기를 관리하는 것이 아니라 그 소요기간을 경영한다.
- 처음 시작 단위작업 일정만 유효하며 그 외 일정은 참고용이다.
- 릴레이 달리기 방식으로 일한다.
- 일단 작업을 시작하면 이것을 최대한 열심히 작업한다.
- 핵심작업과 핵심자원 관리에 노력을 집중한다.

CCPM은 애로경로(critical path) 대신 애로사슬(critical chain)을 제안한다.
: - 애로경로는 작업 선후관계만 감안한 것이지만, 애로사슬은 작업 선후관계와 자원 가용성을 모두 감안하여 정해진 작업 집합을 말한다. CCPM은 애로사슬 작업들을 완료시키는 기간이면 프로젝트 전체를 완료시킬 수 있다는 것을 보장한다. 이것은 애로경로가보장하지 못했던 일이다. 따라서 애로사슬에 관리 초점을 맞추면 프로젝트를 계획대로 관리하고 실행ㅇ를 통제하는 것이 간단해진다.

CCPM은 애로사슬 작업을 완료시키는데 집중한다.
: - 그리고 이를 실행하면서 일정을 통제하기 위한 버퍼관리(buffer management)를 준비해 두고 있다. 버퍼는 여유시간을 한 데 모아놓은 것을 지칭한다.

## Throughput Accounting

**쓰루풋 회계**(TA, throughput accounting)는 다음 3가지 관점, 쓰루풋(throughput), 재고/투자(inventory/invenstment), 그리고 운영비용(operating expense)에서 판단한다.

Throughput(쓰루풋)
: - 시스템이 판매에에의해 돈을 창출하는 속도이다. 쓰루풋은 매출가격에서 순수변동비를 제외한 금액이다. 만약 어떤 제품을 100원에 판매했는데 재료비가 30원이었다면 쓰루풋운 70원이다.

Inventory/Investment(재고)
: - 회사가 판매하려는 의도로 물건을 구매하는데 투자한 모든 돈으로서 묶여 있는 돈이다. 재고, 건물, 기계 등이 포함된다. 반제품이나 완제품 재고 평가는 기존 방법과 다르게 재료 구입가로 평가한다.

Operating Expense(운영비용)
: - 시스템이 투자한 것을 쓰루풋으로 전환하는데 소비한 모든 돈이다. 제조경비와 판매 및 일반관리비로 구분하지 않으며, 급여, 노무비, 전기세, 광고비, 접대비 등이 포함된다.

내용을 정리하면, 쓰루풋 **T**는 판매를 통해 신규 유입되는 자금이며, 재고/투자 **I**는 판매를 목적으로 하는 구매품이나 설비에 투자한 자금이고, 운영비용 **OE**는 I를 쓰루풋으로바꾸기 위해 시스템이 사용하는 비용이다. 매출을 늘리거나 품질활동에 의해 재료비를 줄이며 T가 늘고 설비투자에 신중하면 I 증가를 막으며, 각종 인건비나 활동비를 절감하면 OE가 줄어든다. 따라서 T, I, OE는 다음과 같이 해석할 수 있다.

수익성 향상과 밀접한 관계가 있다.
: - 쓰루풋과 재고가변동이 없을 때 운영비용이 줄면 순수익과 투자수익률은 좋아진다. 쓰루풋과 운영 비용은 변하지 않더라도 재고를 줄이면 투자수익율과 현금흐름이 좋아진다. 재고감축은 재고유지비(이자, 보관비, 불량률 비용, 취급 비용 등)를 줄이므로 운영비용을 감소시키기 때문이다.
경영관리자 의사결정 수준이다.
: - 이들이 어떤 일을 결정할 때 T, I, OE에 미치는 영향을 알아야 한다. 만약 이런 영향을 사전에 확인하지 않는다면 이들은 회사 장래 수깅에 대하여 아무런 생각도 없이 그저 무책임하게 일을 저지른다는 것과 같다.
나침반과 같다.
: - 이것은 회사 어느 부문 의사결정이든지 회사 전체 수익에 미치는 영향을 알려 준다. 부문보다는 전체를 보여주므로 부서마타 나홀로 추진하려는 업무를 막아 상호 협력을 유도한다.

쓰루풋 회계를 특히 관리회계 분야에서 사용하면 의사결정을 수익성과 직격시키면서 그 과정을 단순화시킬 수 있다. 예를 들어 투자효과 붆석, 제품별 판매/생산 전략 수립, 성과지표 정렬 등에 활용될 수 있다.

## Thinking Process

**TP***(thinking process)는 시스템 내 눈에 보이지 않는 제약을 해소하기 위하여 겉으로 드러난 증상(문제점)에 대해 근본 원인을 찾아서 이를 타개할 수 있는 혁신적인 해결 방안과 실천 계획을 도출해 내는 일련의 "사고 프로세스"이다.

문제해결을 위해 세가지 질문이 필요하다.

- 무엇을 변화시킬 것인가?
- 무엇으로 변화할 것인가?
- 어떻게 변화를 일으킬 것인가?

이 질문에 답하는 과정에 다음 5가지 도구를 사용한다.

증발구름(EC, evaporating cloud)
: - 단지 5개 네모상자와 이들 사이 관계를 표시하는 5개 화살표로 구성되며, 필요조건 논리를 사용한다. EC는 이 갈등(구름)을 해소(증발)시키는데 사용된다는 의미로 붙여진 이름이다. 

현재상황나무(CRT, current reality tree)
: - 현재 상황을 논리적으로 파악하는 도구이다. 현재 바람직하지 않은 현상을 시작으로 그 결과 원인들을 찾는 과정에서 근본원인을 파악할 수 있고 조직 핵심문제를 판단할 수 있다.

미래상황나무(FRT, future reality tree)
: - 어떤 해결책이 가져올 결과를 예측하는 다이어그램이다. 어떤 대책을 실행하기전에 그 파급효과를 미리 알아보거나, 그 대책이 과연 목표를 제대로 달성할 수 있을지 알아보고 싶을 때 사용한다. 한마디로미래 시나리오를 그리는 도구이다.

선행조건나무(PrT, prerequisite tree)
: - 주입, 즉 좋은 아이디어나 과제를 실현시키기 위한 추진계획을 수립하는 다이어그램이다. 주입 실형을 방해하는 장애물을 파악하면서 이를 극복하기 위한 중간목표도 설정한다. 중간목표는 장애물 자체를 제거하거나 목표와 연관성을 없애는 것으로 세운다.

실행계획나무(TrT, transition tree)
: - 장애물을 제거하기 위한 중간목표를 행동으로 전환하는 구체적인 실천계획을 작성하는데 쓰인다. 세분화된 각기 활동마다 누가, 언제, 무엇을 할 것인지를 구체화 한다. 차분히 앉아서 주도 면밀한 계획을 세운다면 원하는 대로 목표를 달성할 수 있는 일들을 대상으로 작성한다.

## MTA

일반적으로 수주생산이 바람직하지만 어쩔 수 없이 재고생산(MTS, make to stock)이 필요한 경우가 있다. 성수기를 대비하여 미리 생산하는 경우와 고객 요구 납기가 공급리드타임보다 짧은 경우 고객 요구납기를 충족할 수 있는 전략적 위치에 품묵을 재고 생산함으로써 고객에게 모든 제품을 완전하고 즉각적으로 제공하며 고객은 그런 완전한 가용성에 대한 실제 가치를 인식해야 한다. 이를 위해 100% 재고 가용성을 보장하면서 과잉재고를 줄이는 방법으로 재고버퍼(stock buffer)를 운영하는 방법이 **MTA**(make to availability)이다.

## OTP

:::{.callout-tip title="기출" icon=false}
103-2-6
:::

**OTP**(Optimized Production Technology)는 Eliyahu M. Goldratt가 개발한 생산 관리 이론으로, **제약 이론 (Theory of Constraints, TOC)**을 기반으로 한다. OPT는 생산 시스템에서 제약 요소(constraint)를 식별하고, 이를 중심으로 전체 시스템의 성과를 최적화하는 방법론이다. OTP 목표는 전체 생산 시스템 효율성을 높이고 재고를 최소화하며, 리드타임을 단축시키는 것이다. 이는 제약 요소를 찾아 해결함으로써 생산성을 극대화 한다.

OTP 핵심 개념으로 제약요소, 전체 시스템 최적화, Flow and Throughput이 있다.

제약 요소 (Constraint)
: - 생산 시스템에서 성과를 제한하는 가장 큰 병목 현상을 의미한다. 이 제약을 식별하고, 이를 해결하거나 최소화하는 것이 시스템의 전체 효율을 높이는 열쇠다.

전체 시스템 최적화
: - OPT는 부분 최적화(개별 작업의 효율성 향상) 대신 전체 시스템을 최적화하는 데 집중한다. 이를 위해 병목을 해결하면, 시스템 전체의 성능이 향상된다.

Flow and Throughput
: - OPT에서는 생산 흐름과 제품의 **처리 속도(throughput)**를 중요시한다. 병목을 해결하고, 각 단계에서 흐름을 방해하는 요소를 최소화해야 한다.

OTP 핵심 원칙은 다음과 같다.

제약을 식별하라
: - 병목 지점 또는 제약 요소를 찾아낸다.

제약을 활용하라
: - 병목 지점 성능을 최대화 한다.

제약을 넘어서라
: - 제약을 해결한 후 다시 새로운 병목을 찾아내고 반복한다.

| **모듈**                         | **목표**                                              | **설명**                                                                                      | **예시**                                                       |
|-----------------------------------|-------------------------------------------------------|-----------------------------------------------------------------------------------------------|---------------------------------------------------------------|
| **제약 식별 모듈 (Constraint Identification Module)** | 시스템에서 가장 큰 제약을 식별한다.                        | 생산 시스템에서 성능을 제한하는 병목을 식별하여 해결해야 할 제약을 파악한다.                             | 특정 기계가 생산 속도를 제한하는 경우, 이 기계가 제약이 된다.   |
| **제약 활용 모듈 (Constraint Exploitation Module)**   | 제약을 최대한 활용하여 효율성을 극대화한다.                | 제약이 되는 부분을 해결할 수 없을 때, 제약을 최대한 활용하여 생산성을 높인다.                      | 병목 기계의 가동 시간을 늘리거나 작업 대기 시간을 최소화한다. |
| **비제약 최적화 모듈 (Non-Constraint Optimization Module)** | 제약이 아닌 부분을 최적화하여 전체 시스템 성능을 개선한다.   | 제약이 아닌 부분에서는 낭비를 줄이고 효율성을 높여 전체 시스템의 성능을 개선한다.                  | 병목이 아닌 라인에서 대기 시간을 줄이고 자원 낭비를 줄인다.   |
| **제약 해결 후 재검토 모듈 (Constraint Re-evaluation Module)** | 제약 해결 후 새로운 제약을 재식별하고 시스템을 최적화한다.  | 제약이 해결된 후 새로운 제약이 발생할 수 있으므로 시스템을 주기적으로 재검토하여 새로운 제약을 찾고 해결한다. | 처음에 기계가 병목이라면, 기계 개선 후 물류가 새로운 병목이 될 수 있다. |


